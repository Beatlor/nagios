#!/usr/bin/perl -w
#
# Nagios Addon: service checks based on host status
#Copyright (C) 2014 Stephan Callsen
#
#Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
#associated documentation files (the "Software"), to deal in the Software without restriction,
#including without limitation the rights to use, copy, modify, merge, publish, distribute,
#sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:
#
#The above copyright notice and this permission notice shall be included in all copies or substantial
#portions of the Software.
#
#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT
#LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#  Autor: Stephan Callsen
#  Date:  March. 20th 2014
#  Email: info@callsen.org
#  Version: 1.1
#
# Debian require package libnagios-object-perl
#
#Based on the idea from  Vicente Gavara
#http://monitoringtt.blogspot.de/2011/05/nagios-service-checks-based-on-host.html


use Getopt::Long;
use Nagios::Config;

#my $n_hostname = $ENV{NAGIOS_HOSTNAME}
#my $n_hoststatid = $ENV{NAGIOS_HOSTSTATUSID}

my $n_hostname;
my $n_hoststatid;

my $nagioslivechk = '/var/lib/nagios3/rw/live';
my $nagioscmd     = '/var/lib/nagios3/rw/nagios.cmd';
my $nagiosconf    = '/etc/nagios3/nagios.cfg';
my $nagioslog     = '/var/log/nagios3/eventhandler.log';

my $ext_cmd_ehsn = "ENABLE_HOST_SVC_NOTIFICATIONS";
my $ext_cmd_ehsc = "ENABLE_HOST_SVC_CHECKS";
my $ext_cmd_dhsc = "DISABLE_HOST_SVC_CHECKS";
my $ext_cmd_dhsn = "DISABLE_HOST_SVC_NOTIFICATIONS";
my $ext_cmd_pscr = "PROCESS_SERVICE_CHECK_RESULT";

my $sendcmd;
my $h_service;
my $n_method;
my $servnum;
my $n_maxhostattempts;
my $n_hostattempts;
#Exit on no services!
my @services = ();

my $now = `date +%s`;
chomp ($now);

GetOptions(     "h|host=s"     		=> \$n_hostname,
		"s|hoststatid=s"     	=> \$n_hoststatid,
		"a|attempts=s"		=> \$n_maxhostattempts,
		"u|hostatt=s"		=> \$n_hostattempts,
		"m|method=s"		=> \$n_method
        	#"h|help"       	=> \$HELP
);

#open LOG, ">>$nagioslog" or die $!;
#printf LOG ("[$now] Hostname $n_hostname HoststatID $n_hoststatid\nMaxhostattempts $n_maxhostattempts Hostattempts $n_hostattempts\n");

#Get all host services either by MK Livestatus or by cpan module nagios::config
if ( defined ($n_method)) {
  if ($n_method eq "m") {
    @services = `echo \"GET services\\nColumns\: description\\nFilter\: host_name \>= $n_hostname \\n\" \| unixcat $nagioslivechk`;
  }
  else {
    my $PARS = Nagios::Config->new(Filename => $nagiosconf, Version => 2);
    my $host = $PARS->find_object($n_hostname,'Nagios::Host');
    if ( defined ($host) ) {
      $servnum = 0;
      foreach my $Service ( $host->list_services ) {
        #printf "CONFIG: %s\n", $Service->{'service_description'};
        $services[$servnum] = $Service->{'service_description'};
        $servnum++;
      }
    }
  else { exit 1; }
  }
}
else { exit 1; }

#Exit on no services!
$servnum = @services;
if (!$servnum) { exit 1;}

#printf LOG ("Hostservices\n@services $servnum");
#printf LOG ("\n--End--\n");
#close LOG;


#Send command to pipe
sub sendcommand {
  my ($command )  = @_;
  chomp ( $command );
  if ( defined ( $command ) ) { print CMD "\[$now\] $command\n"; }
}

open CMD, ">$nagioscmd" or die $!;

#Enable all services for a host
if ($n_hoststatid == 0) {
  foreach $h_service (@services) {
    chomp ($h_service);
    #printf ("Activate-$h_service\n");
    sendcommand "$ext_cmd_pscr;$n_hostname;$h_service;0;OK";
  }
  sendcommand "$ext_cmd_ehsn;$n_hostname";
  sendcommand "$ext_cmd_ehsc;$n_hostname";
}
#Disable all services for a host
if ($n_hostattempts == ($n_maxhostattempts-1) && $n_hoststatid != 0) {
   sendcommand "$ext_cmd_dhsc;$n_hostname";
   sendcommand "$ext_cmd_dhsn;$n_hostname";
   foreach $h_service (@services) {
     chomp ($h_service);
     #printf ("Deactivate-$h_service\n");
     sendcommand "$ext_cmd_pscr;$n_hostname;$h_service;3;Process has stopped by host problem";
  }
}

close CMD;
exit 0;
